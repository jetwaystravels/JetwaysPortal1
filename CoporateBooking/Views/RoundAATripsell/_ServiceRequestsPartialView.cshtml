@model DomainLayer.ViewModel.ViewModel
@using System.Collections;
@{
	Layout = null;
	var data01 = Model;

}



<style>

	.activeblue {
		background-color: #d1c3c4 !important;
		/* height: 32px !important; */
		padding: 5px 10px !important;
		border-radius: 3px !important;
		/* margin-top: 10px;*/
	}

	.chkbox {
		background: #b1abab;
		text-align: center;
		cursor: not-allowed;
		padding: 3px 0;
	}


	.border-service {
		border: 1px solid #a5a2a2;
		border-radius: 2px;
	}

	.bg-servc {
		background-color: #f4f5f7;
	}

	.servc-bordr {
		border-bottom: 1px solid #000;
		border-top: none;
		border-left: none;
		border-right: none;
	}

	.servc-bordr, input::-webkit-outer-spin-button, input::-webkit-inner-spin-button { /*  -webkit-appearance: none; */
		margin: 0;
	}

	.servc-bordr, textarea:focus, input:focus {
		outline: none;
	}

	.seatmap-btn {
		border: none;
		padding: 4px 7px;
		border-radius: 4px;
		background: #b5cbe7;
	}

	.select-width {
		max-width: 120px;
	}

	.MWidth {
		width: 1024px !important;
		margin-left: -50%;
	}

	.select-option {
		max-width: 120px;
	}

		.select-option .servc-bordr {
			max-width: 154px;
			min-width: 140px;
		}

	.width-90 {
		width: 60px;
	}

	.select-option2 {
		/*max-width: 120px;*/
	}

		.select-option2 .servc-bordr {
			max-width: 154px;
			min-width: 140px;
		}

	.servc-bordrm2 {
		min-width: 157px;
		max-width: 189px;
	}

	.servc-bordrConm1 {
		min-width: 157px;
		max-width: 189px;
	}

	.servc-bordrbaggage {
		width: 120px;
	}

	.servc-bordrbaggagem2 {
		width: 120px;
	}

	.wdth-100 {
		width: 100px;
	}

	.btngry {
		background-color: #808080 !important;
	}

	.checkout .bg-white.service-section input {
		max-width: 150px !important;
		font-size: 0.9rem;
		padding: 3px;
	}

	.checkout .bg-white.service-section {
		font-size: 0.9rem;
	}

		.checkout .bg-white.service-section .seat {
			display: inline-flex;
		}

		.checkout .bg-white.service-section .output-div-input {
			margin: 3px;
			font-weight: 600;
			color: #085AC0;
			width: 26px;
		}

		.checkout .bg-white.service-section .servc-content span {
			font-weight: 600;
			text-transform: capitalize;
		}

	.servc-bordrm1 option {
		font-size: 12px;
	}






	.service-table {
		display: flex;
		flex-direction: column;
		width: 100%;
		border-radius: 8px;
	}

	.table-row {
		display: flex;
		border-bottom: 1px solid #ddd;
		align-items: center;
	}

		.table-row.header {
			background: #f4f4f4;
			font-weight: bold;
			position: inherit;
			height: auto;
		}

	.cell {
		flex: 1;
		padding: 10px 0;
		text-align: center;
		border-right: 1px solid #eee;
		display: inline-block;
		align-items: center;
	}

		.cell .servc-bordr {
			width: 100%;
		}

		.cell .lft-spc {
			padding: 0 3px;
			display: inline-flex;
		}

		.cell:last-child {
			border-right: none;
		}

	.icon {
		width: 20px;
		height: 20px;
		margin-right: 5px;
		vertical-align: middle;
	}

	.service-select, .service-input {
		width: 100%;
		padding: 6px 8px;
		font-size: 14px;
	}

	.traveller-cell {
		width: 100px;
		flex: 0 0 auto;
		text-align: center;
		padding-left: 16px;
		font-weight: bold;
	}

</style>
<script src="~/js/custom.js/customnew.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<script src="~/js/custom.js/roundtripsell.js"></script>

<script>
	$(document).ready(function () {



	$('.servc-bordrm1').change(function () {
	debugger;
	var selectedMeals = [];
	var totalPrice = 0;

	$('.servc-bordrm1').each(function () {
	debugger;
	var selectedValue = $(this).val();
	if (selectedValue) {
	debugger;
	var price_value = selectedValue.split('_');
	var mealPrice = parseFloat(price_value[1]);

	selectedMeals.push(selectedValue);
	totalPrice += mealPrice;

	}

	});
	localStorage.setItem("MealssrKeyCount", JSON.stringify(selectedMeals));
	document.getElementById("hiddenSsrKey").value = selectedMeals.join(',');
	$('#AddMeal').text(totalPrice.toFixed(2));
	updateCombinedTotalRT();


	});



	$('.select-option2 .servc-bordrCon').change((e) => {
	debugger;
	var selectedMealsCon = [];
	var totalPrice = 0;

	$('.servc-bordrCon').each(function () {
	debugger;
	var selectedValue = $(this).val();
	if (selectedValue) {
	debugger;
	var price_value = selectedValue.split('_');
	var mealPrice = parseFloat(price_value[1]);

	selectedMealsCon.push(selectedValue);
	totalPrice += mealPrice;
	}

	localStorage.setItem("MealssrKeyCount2", JSON.stringify(selectedMealsCon));
	document.getElementById("hiddenSsrKey2").value = selectedMealsCon.join(',');

	});

	$('#AddMeal2').text(totalPrice.toFixed(2));
	updateCombinedTotalRT();

	});


	$('.servc-bordrbaggage').change(function () {
	debugger;
	var selectedBaggage = [];
	var baggagePrice = 0;

	$('.servc-bordrbaggage').each(function () {
	debugger;
	var selectedValue = $(this).val();
	if (selectedValue) {
	debugger;
	var price_value = selectedValue.split('_');
	var BagPrice =null;
	if (price_value.indexOf("AirIndia") === -1)
	{
	 BagPrice = parseFloat(price_value[1]);
	}
	else
	{
	 BagPrice = parseFloat(price_value[2]);
	}
	selectedBaggage.push(selectedValue + "_OneWay0");
	baggagePrice += BagPrice;

	}

	});
	localStorage.setItem("BagssrKeyCount", JSON.stringify(selectedBaggage));
	document.getElementById("hiddenbagKey").value = selectedBaggage.join(',');
	$('#AddBaggage').text(baggagePrice.toFixed(2));
	updateCombinedTotalRT();


	});




	$('.servc-bordrm2').change(function () {
	debugger;
	var selectedMeals = [];
	var totalPrice = 0;

	$('.servc-bordrm2').each(function () {
	debugger;
	var selectedValue = $(this).val();
	if (selectedValue) {
	debugger;
	var price_value = selectedValue.split('_');
	var mealPrice = parseFloat(price_value[1]);

	selectedMeals.push(selectedValue);
	totalPrice += mealPrice;

	}

	});
	localStorage.setItem("MealssrKeyCountRT", JSON.stringify(selectedMeals));
	document.getElementById("hiddenSsrKeyRT").value = selectedMeals.join(',');
	$('#AddMealRT').text(totalPrice.toFixed(2));
	updateCombinedTotalRT();


	});





	$('.select-option2RT .servc-bordrConm1').change((e) => {
	debugger;
	var selectedMealsCon = [];
	var totalPrice = 0;

	$('.servc-bordrConm1').each(function () {
	debugger;
	var selectedValue = $(this).val();
	if (selectedValue) {
	debugger;
	var price_value = selectedValue.split('_');
	var mealPrice = parseFloat(price_value[1]);

	selectedMealsCon.push(selectedValue);
	totalPrice += mealPrice;
	}

	localStorage.setItem("MealssrKeyCount2RT", JSON.stringify(selectedMealsCon));
	document.getElementById("hiddenSsrKey2RT").value = selectedMealsCon.join(',');

	});

	$('#AddMeal2RT').text(totalPrice.toFixed(2));
	updateCombinedTotalRT();

	});



	$('.servc-bordrbaggagem2').change(function () {
	debugger;
	var selectedBaggage = [];
	var baggagePrice = 0;

	$('.servc-bordrbaggagem2').each(function () {
	debugger;
	var selectedValue = $(this).val();
	if (selectedValue) {
	debugger;
	var price_value = selectedValue.split('_');
	var BagPrice = null;
	if (price_value.indexOf("AirIndia") === -1)
	{
	 BagPrice = parseFloat(price_value[1]);
	}
	else
	{
	 BagPrice = parseFloat(price_value[2]);
	}
	selectedBaggage.push(selectedValue + "_RT0");
	baggagePrice += BagPrice;

	}

	});
	localStorage.setItem("BagssrKeyCountRT", JSON.stringify(selectedBaggage));
	document.getElementById("hiddenbagKeyRT").value = selectedBaggage.join(',');
	$('#AddBaggageRT').text(baggagePrice.toFixed(2));
	updateCombinedTotalRT();


	});


	function GetParameterValues(param) {
	var url = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
	for (var i = 0; i < url.length; i++) {
	var urlparam = url[i].split('=');
	if (urlparam[0] == param) {
	return urlparam[1];
	}
	}
	}


	// bagage code end

	$("#Continuebtn").click(function () {
	debugger;
	var unitKey = JSON.parse(localStorage.getItem("selectedIds"));
	// let mealcode1 = JSON.parse(localStorage.getItem("MealssrKeyCount"));
	// let mealcode2 = JSON.parse(localStorage.getItem("MealssrKeyCount2"));
	// var ssrKey = mealcode1 + "," + mealcode2;
	let mealcode1 = JSON.parse(localStorage.getItem("MealssrKeyCount"));
	let mealcode2 = JSON.parse(localStorage.getItem("MealssrKeyCount2"));
	let mealcode1RT = JSON.parse(localStorage.getItem("MealssrKeyCountRT"));
	let mealcode2RT = JSON.parse(localStorage.getItem("MealssrKeyCount2RT"));
	//var ssrKey;
	// if (mealcode2 && mealcode2.length > 0) {
	//     ssrKey = mealcode1.concat(mealcode2);
	// } else {
	//     ssrKey = mealcode1;
	// }

	// if (mealcode2RT && mealcode2RT.length > 0) {
	//     ssrKey = mealcode1RT.concat(mealcode2RT);
	// } else {
	//     ssrKey = mealcode1RT;
	// }
	var ssrKey = [];
	var BaggageSSrkey = [];
	if (mealcode2 && mealcode2.length > 0) {
	ssrKey = ssrKey.concat(mealcode1, mealcode2);
	} else {
	ssrKey = ssrKey.concat(mealcode1);
	}

	if (mealcode2RT && mealcode2RT.length > 0) {
	ssrKey = ssrKey.concat(mealcode1RT, mealcode2RT);
	} else {
	ssrKey = ssrKey.concat(mealcode1RT);
	}
	let BaggageSSrkey_0 = JSON.parse(localStorage.getItem("BagssrKeyCount"));
	let BaggageSSrkey_1 = JSON.parse(localStorage.getItem("BagssrKeyCountRT"));
	if (BaggageSSrkey_1 && BaggageSSrkey_1.length > 0) {
	BaggageSSrkey = BaggageSSrkey.concat(BaggageSSrkey_0, BaggageSSrkey_1);
	} else {
	BaggageSSrkey = BaggageSSrkey.concat(BaggageSSrkey_0);
	}
	$.ajax({
	url: "/RoundAATripsell/PostUnitkey?Guid=" + GetParameterValues("Guid"),
	type: "POST",
	contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
	data: { unitKey: unitKey, ssrKey: ssrKey, BaggageSSrkey: BaggageSSrkey },
	success: function (data) {
	window.location.href = '/RoundTripPaymentGateway/RoundTripPaymentView?Guid=' + GetParameterValues("Guid");
	},
	error: function (err) {
	console.error(err);
	}
	});
	});





	$(".modelPopBtn").click(function (e) {
	e.preventDefault();
	$("#leftNstop2").off("click");
	$("#leftConnect2").off("click");
	$("#leftConnect_2").off("click");
	$("#rightconnect2").off("click");
	$("#Lrightconnect2").off("click");
	$("#RightNonstop2").off("click");
	$("#rightNstop2").off("click");
	$.ajax({
	//url: '@Url.Action("RTPostSeatMapModaldataView", "RoundAATripsell")',
	url: "/RoundAATripsell/RTPostSeatMapModaldataView?GUID=" + GetParameterValues("Guid"),
	type: "GET",
	success: function (data) {
	//console.log('POST request successful');
	$('#sgexampleModal .modal-bodyy').html(data);
	$('#sgexampleModal').modal('show');

	},
	error: function (error) {
	console.log("Error fetching data:", error);
	}
	});
	});

	});

	window.addEventListener("beforeunload", function () {
	localStorage.removeItem("MealssrKeyCount");
	localStorage.removeItem("MealssrKeyCount2");
	localStorage.removeItem("MealssrKeyCountRT");
	localStorage.removeItem("MealssrKeyCount2RT");
	localStorage.removeItem("BagssrKeyCount");
	localStorage.removeItem("BagssrKeyCountRT");
	});



</script>




<section id="myContainer1">
	<div class="container">
		<div class="col-lg-12">


			<!-- Modal -->
			<div class="modal fade sgexampleModal-bx" id="sgexampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
				<div class="modal-dialog" role="document">
					<div class="modal-content MWidth">
						<div class="modal-mfareheader d-flex justify-between">
							<h2 class="text-22 fw-600">Seat Details</h2>
						</div>
						<div class="modal-bodyy mbody-padding">
						</div>
						<div class="modal-footer fbody-padding">
							<div class="row legendHolder-box">
								<div class="col-lg-8">
									<ul>

										<li style="padding:0;"><strong>Legend:</strong></li>
										<li><span class="free"></span>Free Seats</li>
										<li><span class="midcomfort"></span>&#8377; 120 - &#8377; 350</li>
										<li><span class="comfort"></span>&#8377; 49 - 120, &#8377; 351 - 2000</li>
										<li><span class="booked"></span>Occupied</li>

									</ul>


								</div>

								<div class="col-lg-4">

									@{
										int segmentcount = Model.passeengerlistRT[0].journeys[0].segments.Count;
										@if (segmentcount == 1)
										{
											<div class="d-flex">
												<div id="LeftNonstop">
													<button type="button" id="leftNstop1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
													<button type="button" id="leftNstop2" class="btn  btn-primary">Continue</button>
												</div>

												<!---Right Side Button---->
												<div id="rightNonstop" style="display:none;">
													<button type="button" id="rightNstop1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
													<button type="button" id="rightNstop2" data-dismiss="modal" class="btn btnclose btn-primary">Continue</button>
												</div>
												<div id="LrightConnect1" style="display:none;">
													<button type="button" id="Lrightconnect1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
													<button type="submit" id="Lrightconnect2" class="btn  btn-primary">Continue</button>
												</div>
												<div id="LrightConnect2" style="display:none;">
													<button type="button" id="Lrightconnect_1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
													<button type="submit" id="Lrightconnect_2" data-dismiss="modal" class="btn btnclose btn-primary">Continue..</button>
												</div>

											</div>
										}
										else
										{

											@for (int i = 0; i < segmentcount; i++)
											{
												@if (i == 1)
												{
													<div class="d-flex">
														<div id="leftConnect">
															<button type="button" id="leftConnect1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
															<button type="submit" id="leftConnect2" class="btn  btn-primary">Continue</button>
														</div>
														<div id="leftConnect_2" style="display:none;">
															<button type="button" id="leftConnect_1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
															<button type="submit" id="leftConnectbtn_2" class="btn  btn-primary">Continue</button>
														</div>
														<div id="rightConnect1" style="display:none;">
															<button type="button" id="rightconnect1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
															<button type="submit" id="rightconnect2" class="btn  btn-primary">Continue</button>
														</div>
														<div id="rightConnect2" style="display:none;">
															<button type="button" id="rightconnect_1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
															<button type="submit" id="rightconnect_2" data-dismiss="modal" class="btn btnclose btn-primary">Continue..</button>
														</div>

														<div id="RightNonstop" style="display:none;">
															<button type="button" id="RightNonstop1" data-dismiss="modal" class="btn  btngry btnclose">Cancel</button>
															<button type="submit" id="RightNonstop2" data-dismiss="modal" class="btn btnclose btn-primary">Continue..</button>
														</div>
													</div>
												}

											}
										}
									}
								</div>
								<p><strong>Disclaimer:</strong> Seat allotment is the sole prerogative of the airline and can't be guaranteed by jetwaystravel.com</p>

							</div>

						</div>
					</div>
				</div>
			</div>

		</div>
	</div>
</section>

<div class="flight-box-content rounded-4">
	<div class="tabs -pills-3 js-tabs">



		<div class="tabs__content pt-0 js-tabs-content">
			<div class="tabs__pane -tab-item-1 is-tab-el-active">
				<div class="journey-box">
					<ul class="nav nav-pills mb-3">
						@{
							var seatmaap2 = @Model.passeengerlistRT[0].journeys[0].segments.Count;
							if (seatmaap2 != 2)
							{
								<li class="nav-item">
									<div id="seattab1way" class="nav-link activeblue">@Model.passeengerlistRT[0].journeys[0].segments[0].designator.origin-@Model.passeengerlistRT[0].journeys[0].segments[0].designator.destination</div>
								</li>
							}
							else
							{
								<li class="nav-item d-flex">
									<div id="seattab1" class="nav-link activeblue">@Model.passeengerlistRT[0].journeys[0].segments[0].designator.origin-@Model.passeengerlistRT[0].journeys[0].segments[0].designator.destination</div>
									<div id="seattab2" class="nav-link">@Model.passeengerlistRT[0].journeys[0].segments[1].designator.origin-@Model.passeengerlistRT[0].journeys[0].segments[1].designator.destination</div>
								</li>
							}
							//RoundTrip
							@if (Model.passeengerlistRT.Count > 1)
							{
								var seatmaapRT2 = @Model.passeengerlistRT[1].journeys[0].segments.Count;
								if (seatmaapRT2 != 2)
								{
									<li class="nav-item">
										<div id="seattabRT1way" class="nav-link">@Model.passeengerlistRT[1].journeys[0].segments[0].designator.origin-@Model.passeengerlistRT[1].journeys[0].segments[0].designator.destination</div>
									</li>
								}
								else
								{
									<li class="nav-item d-flex">
										<div id="seattabRT1" class="nav-link">@Model.passeengerlistRT[1].journeys[0].segments[0].designator.origin-@Model.passeengerlistRT[1].journeys[0].segments[0].designator.destination</div>
										<div id="seattabRT2" class="nav-link">@Model.passeengerlistRT[1].journeys[0].segments[1].designator.origin-@Model.passeengerlistRT[1].journeys[0].segments[1].designator.destination</div>
									</li>
								}
							}
						}

					</ul>
				</div>
				<!--Left Side non stop-->
				<div class="service-table" id="tabshow1">					
							<div class="border-service">
								@*<div class="d-flex justify-content-between bg-servc py-2">
									<div class="serv-header">
										Traveller
									</div>
									<div class="serv-header">
										<img src="~/img/pmeal.png" style="width:20px;height:20px;margin-right:10px;" />  Meal
									</div>
									<div class="serv-header">
										<img src="~/img/pseat.png" style="width:20px;height:20px;margin-right:10px;" />Seat
									</div>
									<div class="serv-header">
										<img src="~/img/pbaggage.png" style="width:20px;height:20px;margin-right:10px;" /> Baggage
									</div>
									<div class="serv-header">
										Special Request
									</div>
								</div>*@

									<div class="table-row header">
										<div class="cell traveller-cell"><span class="lft-spc">Traveller</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pmeal.png" class="icon"> Meal</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pseat.png" class="icon"> Seat</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pbaggage.png" class="icon"> Baggage</span></div>
										<div class="cell"><span class="lft-spc">Special Request</span></div>
									</div>

								@{
									int passengerdata2 = @Model.passeengerlistRT[0].passengerscount;
								}

								@{
									int passengerdataValue2 = 0;
									for (int i = 0; i < @Model.passeengerlistRT[0].passengers.Count; i++)
									{
										if (Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "ADT" || Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "CHD")
										{
											if (Model.passengerNamedetails != null)
											{
												Model.passeengerlistRT[0].passengers[i].name = Model.passengerNamedetails[i].first;
											}
											passengerdataValue2 = passengerdataValue2 + 1;
										}
									}
									passengerdata2 = passengerdataValue2;


									for (int pas = 0; pas < Model.passengerNamedetails.Count; pas++)
									{
										if (Model.passengerNamedetails[pas].passengertypecode == "INF" || Model.passengerNamedetails[pas].passengertypecode == "INFT")
											continue;
										string FullName = string.Empty;
										string AirLine = string.Empty;
										string mealnamedisplay = string.Empty;
										string ssrkeyAA = string.Empty;
										string bagkeyAA = string.Empty;
										string bagkey = string.Empty;
										string otherbagkey = string.Empty;
										string ssrkey = string.Empty;
										<div class="table-row">
										<div class="cell traveller-cell">
												<div class="lft-spc">
												<!--Travellor @pas-->
												@if (Model.passengerNamedetails != null)
												{
													string name = Model.passengerNamedetails[pas].first;
													FullName = Model.passengerNamedetails[pas].first + "/" + Model.passengerNamedetails[pas].last + "/" + Model.passengerNamedetails[pas].passengertypecode;
													<span>@name</span>
												}
												</div>
											</div>
									<div class="cell">
										<div class="lft-spc">
												@{

													if (Model.MealslistRT[0] != null && Model.MealslistRT[0].legSsrs.Count > 0)
													{
														if (Model.MealslistRT[0].legSsrs[0].legssrs.Count > 0)
														{
															AirLine = Model.MealslistRT[0].legSsrs[0].legssrs[0].legpassengers[0].Airline.ToString();
														}
													}
													List<SelectListItem> mealOptions = new List<SelectListItem>();
													if (AirLine.ToLower() == "airasia")
													{
														// for (int l = 0; l < Model.MealslistRT[0].legSsrs.Count; l++)
														// {
														if (Model.MealslistRT[0].legSsrs.Count > 0)
														{
															for (int s = 0; s < Model.MealslistRT[0].legSsrs[0].legssrs.Count; s++)
															{
																string ssrprice = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																mealnamedisplay = Model.MealslistRT[0].legSsrs[0].legssrs[s].name;
																string Mealcode = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																//  string MealcodeData = Mealcode.StartsWith("V", StringComparison.OrdinalIgnoreCase).ToString();
																AirLine = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline.ToString();
																string Mealname = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																ssrkeyAA = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[pas].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																// if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																// {
																//     ssrkeyAA = Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[0].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[0].Airline;
																// }
																// else
																// {
																//     ssrkeyAA = Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[0].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[0].Airline;
																// }


																string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) ||
																Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString();
																if (Mcode.ToLower() == "true")
																{
																	continue;
																}
																if (mealnamedisplay == null)
																{
																	continue;
																}
																else
																	ssrkey = Mealcode;
																if (Mealcode != null)
																{
																	if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																	{
																		//  if (MealcodeData != "False")
																		// {

																		if (ssrkeyAA != null)
																		{
																			mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																		}
																		// }

																	}
																	else
																	{
																		mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																	}
																}
															}
														}
														//}
													}
													else
													{
														if (Model.MealslistRT != null && Model.MealslistRT.Count > 0 && Model.MealslistRT[0] != null)
														{
															if (Model.MealslistRT[0].legSsrs.Count > 0)
															{
																for (int s = 0; s < Model.MealslistRT[0].legSsrs[0].legssrs.Count; s++)
																{
																	string ssrprice = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																	mealnamedisplay = Model.MealslistRT[0].legSsrs[0].legssrs[s].name;
																	string Mealcode = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																	//string MealcodeData = Mealcode.StartsWith("V", StringComparison.OrdinalIgnoreCase).ToString();
																	AirLine = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline.ToString();
																	string Mealname = string.Empty;
																	//string Mealname = Model.MealslistRT[0].legSsrs[l].legssrs[s].ssrCode + "-" + Model.MealslistRT[0].legSsrs[l].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[pas].price;
																	// ssrkeyAA = Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[pas].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[l].legssrs[s].legpassengers[0].Airline;
																	if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																	{
																		ssrprice = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[pas].price;
																		Mealname = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode + "-" + Model.MealslistRT[0].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[pas].price;
																		ssrkeyAA = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[pas].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																	}
																	else
																	{
																		Mealname = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode + "-" + Model.MealslistRT[0].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																		ssrkeyAA = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "OneWay0" + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																	}

																	string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) ||
																	Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																	Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString();
																	bool SpecialCode = false;
																	if (AirLine.ToLower() == "airindia")
																	{
																		string Sssrcode = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode;
																		SpecialCode = (Sssrcode.Equals("AVML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("BBML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("BLML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("CHML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("DBML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("FPML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("GFML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("HNML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("KSML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("LCML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("LFML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("LSML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("MOML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("NBML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("NLML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("NOML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("RVML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("SFML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("SPML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("VGML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("VJML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("VLML", StringComparison.OrdinalIgnoreCase) ||
																		Sssrcode.Equals("VOML", StringComparison.OrdinalIgnoreCase));
																		//string Mcode = isSpecialCode.ToString();

																		if (SpecialCode == false)
																		{
																			continue;
																		}
																		else
																			ssrkey = Mealcode;

																	}
																	else
																	{

																		// string Mcode = Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();



																		// if (Mcode.ToLower() == "false" || SpecialCode == false)
																		// {
																		//     continue;
																		// }
																		// else
																		//     ssrkey = Mealcode;


																		string inventry = Model.MealslistRT[0].legSsrs[0].legssrs[s].inventoryControlled.ToString();
																		string fastFFDW = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode;
																		// string Mcode = Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																		if (fastFFDW == "FFWD")
																		{
																			continue;
																		}
																		if (Mcode.ToLower() == "true")
																		{
																			continue;
																		}
																		if (mealnamedisplay == null)
																		{
																			continue;
																		}
																		else
																			ssrkey = Mealcode;
																	}
																	if (Mealcode != null)
																	{
																		if (AirLine.ToLower() == "airasia")
																		{

																			if (ssrkeyAA != null)
																			{
																				mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																			}

																		}

																		else if (AirLine.ToLower() == "akasaair")
																		{
																			//if (inventry == "true")
																			//{
																			if (ssrkeyAA != null)
																			{
																				mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																			}
																			//}
																		}

																		else
																		{
																			mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																		}
																	}
																}
															}
														}
													}
													<div>

														@if (mealOptions.Count > 0)
														{
															<select id="ddlMealOptions" class="servc-bordr servc-bordrm1">
																<option selected="selected" value="">Please select meal</option>
																@foreach (var option in mealOptions)
																{
																	<option value="@option.Value" data-ssrkey=@ssrkey>
																		@option.Text
																	</option>
																}
															</select>
														}
														else
														{
															<select style="background:#f0f0f0" id="ddlMealOptions" class="servc-bordr servc-bordrm1" disabled>
																<option selected="selected" value="">Meal Unavailable</option>
															</select>
														}
														<input type="hidden" id="hiddenSsrKey" name="ssrKey" value="" />
													</div>

												}
												@*<select id="mealid" class="servc-bordr select-width" asp-items="@mealOptions"></select>*@

											</div>
											</div>
									<div class="cell">
										<div class="lft-spc">
											<input type="button" id="exampleModalSeat" value="Seat Map" class="button modelPopBtn small-btn rtbtn" data-toggle="modal" data-target="#sgexampleModal">
											<div class="output-div-input" id="outputDiv_@pas"></div>
										</div>												
									</div>
									<div class="cell select-baggage">
										<div class="lft-spc">
												@{
													List<SelectListItem> BaggageOptions = new List<SelectListItem>();

													if (AirLine.ToLower() == "airasia")
													{
														for (int s = 0; s < Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr.Count; s++)
														{
															string priceBaggage = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
															string Sssrcode = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].ssrCode;
															//  string bagcode = Sssrcode.StartsWith("P", StringComparison.OrdinalIgnoreCase).ToString();
															bool isSpecialCode = Sssrcode.Equals("PBCA", StringComparison.OrdinalIgnoreCase) ||
															Sssrcode.Equals("PBCB", StringComparison.OrdinalIgnoreCase) ||
															Sssrcode.Equals("PBA3", StringComparison.OrdinalIgnoreCase) ||
															Sssrcode.Equals("PBAB", StringComparison.OrdinalIgnoreCase) ||
															Sssrcode.Equals("PBAC", StringComparison.OrdinalIgnoreCase) ||
															Sssrcode.Equals("PBAD", StringComparison.OrdinalIgnoreCase) ||
															Sssrcode.Equals("PBAF", StringComparison.OrdinalIgnoreCase);
															string bagcode = isSpecialCode.ToString();

															var bagname = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].name + "@" + Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
															bagkey = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].ssrKey + "_" + Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price + "_" + Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].Airline;
															string passengerKey = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].passengerKey;
															if (bagcode != "False")
															{
																if (bagname.Contains("Xtra-Carry-On") || bagname.Contains(" Xcess Baggage"))
																{
																	string[] parts = bagname.Split(new string[] { "Xtra-Carry-On", "Xcess Baggage" }, StringSplitOptions.RemoveEmptyEntries);
																	string _desc = string.Empty;
																	if (Sssrcode.Equals("PBCA", StringComparison.OrdinalIgnoreCase) || Sssrcode.Equals("PBCB", StringComparison.OrdinalIgnoreCase))
																		_desc = "Cabin Baggage";
																	else
																		_desc = "Check-In Baggage";

																	string formattedName = string.Join(_desc, parts).Trim();
																	BaggageOptions.Add(new SelectListItem { Text = formattedName, Value = bagkey });
																}
																else
																{
																	BaggageOptions.Add(new SelectListItem { Text = bagname, Value = bagkey });
																}
															}



														}
													}
													else if (AirLine.ToLower() == "akasaair")
													{
														try
														{
														  for (int s = 0; s < Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr.Count; s++)
														{
																string priceBaggage = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
																string Sssrcode = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].ssrCode;
																string bagcode = Sssrcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																var bagname = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].name + "@" + Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
																bagkey = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].ssrKey + "_" + Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price + "_" + Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].Airline;
																string passengerKey = Model.MealslistRT[0].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].passengerKey;
																if (bagcode != "False")
																{
																	if (bagname.Contains("Xtra-Carry-On") || bagname.Contains(" Xcess Baggage"))
																	{
																		string[] parts = bagname.Split(new string[] { "Xtra-Carry-On", "Xcess Baggage" }, StringSplitOptions.RemoveEmptyEntries);
																		string _desc = string.Empty;
																		if (Sssrcode.Equals("PBCA", StringComparison.OrdinalIgnoreCase) || Sssrcode.Equals("PBCB", StringComparison.OrdinalIgnoreCase))
																			_desc = "Cabin Baggage";
																		else
																			_desc = "Check-In Baggage";
																		string formattedName = string.Join(_desc, parts).Trim();
																		BaggageOptions.Add(new SelectListItem { Text = formattedName, Value = bagkey });
																	}
																	else
																	{
																		BaggageOptions.Add(new SelectListItem { Text = bagname, Value = bagkey });
																	}
																}
				
														}
														}
														catch (Exception ex)
														{

														}
													}
													else if (AirLine.ToLower() == "airindia")
													{
														BaggageOptions = new List<SelectListItem>();
														string weight = "";
														bagkey = "";
														string Bagname = "";
														string Sssrcode = "";
														for (int i = 0; i < Model.BaggagelistRT[0].legSsrs.Count; i++)
														{
															if (Model.BaggagelistRT[0].legSsrs[i].legssrs[0].ssrCode.Contains(Model.passengerNamedetails[pas].passengerkey.Split("**")[0]))
															{
																string ssrprice = Model.BaggagelistRT[0].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																// if (Model.passengerNamedetails[pas].passengerkey.Contains("**"))
																// {
																// 	Sssrcode = Model.BaggagelistRT[0].legSsrs[i].legssrs[0].ssrCode + "_" + Model.passengerNamedetails[pas].passengerkey.Split("**")[0] + "_" + Model.BaggagelistRT[0].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																// }
																// else
																// {
																// 	Sssrcode = Model.BaggagelistRT[0].legSsrs[i].legssrs[0].ssrCode + "_" + Model.passengerNamedetails[pas].passengerkey + "_" + Model.BaggagelistRT[0].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																// }
																Sssrcode = Model.BaggagelistRT[0].legSsrs[i].legssrs[0].ssrCode;
																Bagname = Model.BaggagelistRT[0].legSsrs[i].legssrs[0].name + " ₹" + @Model.BaggagelistRT[0].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																bagkey = Bagname;
																if (bagkey != null)
																{
																	BaggageOptions.Add(new SelectListItem { Text = Bagname, Value = Sssrcode });
																}
															}
															else
																continue;

														}
													}
													else
													{
														if (Model.MealslistRT != null && Model.MealslistRT.Count > 0 && Model.MealslistRT[0] != null)
														{
															string Bagname = "";
															string weight = "";
															if (Model.MealslistRT[0].legSsrs.Count > 0)
															{
																for (int s = 0; s < Model.MealslistRT[0].legSsrs[0].legssrs.Count; s++)
																{
																	string ssrprice = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																	string Sssrcode = Model.MealslistRT[0].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																	AirLine = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].Airline.ToString();
																	string bagcode = string.Empty;
																	// if (AirLine.ToLower() == "airindia")
																	// {
																	// 	bagcode = Sssrcode.StartsWith("XBAG", StringComparison.OrdinalIgnoreCase).ToString();
																	// 	if (Model.passengerNamedetails[pas].passengertypecode == "ADT" || Model.passengerNamedetails[pas].passengertypecode == "CNN" || Model.passengerNamedetails[pas].passengertypecode == "CHD")
																	// 	{
																	// 		weight = "15 kg";
																	// 	}
																	// }
																	// else
																	// {
																	bagcode = (Sssrcode.StartsWith("X", StringComparison.OrdinalIgnoreCase) || Sssrcode.StartsWith("E", StringComparison.OrdinalIgnoreCase)).ToString();
																	//  }
																	bagkeyAA = Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																	if (bagcode.ToLower() == "true")
																	{
																		// if (AirLine.ToLower() == "airindia")
																		// {
																		// 	Bagname = Model.MealslistRT[0].legSsrs[0].legssrs[s].name + "-" + weight + " ₹" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;

																		// }
																		// else
																		// {
																		Bagname = Model.MealslistRT[0].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[0].legssrs[s].legpassengers[0].price;
																		// }
																		bagkey = Sssrcode;
																	}
																	else
																		continue;


																	if (bagcode != null)
																	{
																		// if (AirLine.ToLower() == "airasia")
																		// {
																		// 	if (bagkeyAA != null)
																		// 	{
																		// 		BaggageOptions.Add(new SelectListItem { Text = Bagname, Value = bagkeyAA });
																		// 	}
																		// }

																		// else
																		// {     // Baggage Code except airasia
																		BaggageOptions.Add(new SelectListItem { Text = Bagname, Value = Sssrcode });
																		//  }
																	}
																}
															}
														}

													}
												}


												<div>

													<select id="ddlbagOptions" class="servc-bordr servc-bordrbaggage">
														<option selected="selected" value="">Please select baggage</option>
														@if(AirLine.ToLower() == "airindia")
														{
															foreach (var option in BaggageOptions)
															{
																<option value="@option.Value" data-bagkey=@bagkey>
																	@option.Text.Split('_')[0].ToString() ₹  @option.Text.Split('_')[2].ToString().Split('₹')[0]
																</option>
															}
														}
														else
														{
															var sortedBaggageOptions = BaggageOptions.OrderBy(o => int.Parse(new string(o.Text.Where(char.IsDigit).ToArray())))
															.ToList();
															@foreach (var option in sortedBaggageOptions)
															{
																<option value="@option.Value" data-bagkey=@bagkey>
																	@option.Text
																</option>
															}
														}
														
													</select>
													<input type="hidden" id="hiddenbagKey" name="bagkey" value="" />
												</div>
												</div>
											</div>
											@if (AirLine.ToLower() == "airasia")
											{

										<div class="cell">
											<div class="lft-spc">
											<select class="servc-bordr">
												<option value=""><b>OtherService Unavailable</b></option>
											</select>
											</div>
										</div>

											}
											else
											{
										<div class="cell">
											<div class="lft-spc" style="width: 100%;">
											<select class="servc-bordr">
												<option></option>
												<option>Meal1</option>
												<option>Meal2</option>
												<option>Meal3</option>
												<option>Meal4</option>
											</select>
											</div>
										</div>
											}
										</div>

									}
								}
					</div>
				</div>


				<!----left Side connecting new design Code start---- -->
				<div class="service-table" id="tabshow2">
					<div class="border-service">
								@*<div class="d-flex justify-content-between bg-servc py-2">
									<div class="serv-header">
										Traveller
									</div>
									<div class="serv-header">
										<img src="~/img/pmeal.png" style="width:20px;height:20px;margin-right:10px;" /> Meal
									</div>
									<div class="serv-header">
										<img src="~/img/pseat.png" style="width:20px;height:20px;margin-right:10px;" /> Seat
									</div>

									<div class="serv-header">
										Special Request
									</div>
								</div>*@

								<div class="table-row header">
									<div class="cell traveller-cell"><span class="lft-spc">Traveller</span></div>
									<div class="cell"><span class="lft-spc"><img src="~/img/pmeal.png" class="icon"> Meal</span></div>
									<div class="cell"><span class="lft-spc"><img src="~/img/pseat.png" class="icon"> Seat</span></div>
									<div class="cell"><span class="lft-spc"><img src="~/img/pbaggage.png" class="icon">Baggage</span></div>
									<div class="cell"><span class="lft-spc">Special Request</span></div>
								</div>


								@{
									passengerdata2 = @Model.passeengerlistRT[0].passengerscount;
								}

								@{
									passengerdataValue2 = 0;
									for (int i = 0; i < @Model.passeengerlistRT[0].passengers.Count; i++)
									{
										if (Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "ADT" || Model.passeengerlistRT[0].passengers[i].passengerTypeCode == "CHD")
										{
											passengerdataValue2 = passengerdataValue2 + 1;
										}
									}
									passengerdata2 = passengerdataValue2;


									for (int pas = 0; pas < Model.passengerNamedetails.Count; pas++)
									{
										if (Model.passengerNamedetails[pas].passengertypecode == "INF" || Model.passengerNamedetails[pas].passengertypecode == "INFT")
											continue;
										string AirLine = string.Empty;
										string FullName = string.Empty;
										string mealnamedisplay = string.Empty;
										string ssrkeyAA = string.Empty;
										string bagkeyAA = string.Empty;
										string ssrkey = string.Empty;
										<div class="table-row">
											<div class="cell traveller-cell">
												<div class="lft-spc">
												<!--Travellor @pas-->
												@if (Model.passengerNamedetails != null)
												{
													string name = Model.passengerNamedetails[pas].first;
													FullName = Model.passengerNamedetails[pas].first + "/" + Model.passengerNamedetails[pas].last + "/" + Model.passengerNamedetails[pas].passengertypecode;
													<span>@name</span>
												}
												</div>
											</div>
											<div class="cell select-option2">
												<div class="lft-spc">
												@{
													if (Model.MealslistRT != null && Model.MealslistRT.Count > 0 && Model.MealslistRT[0] != null)
													{
														if (Model.MealslistRT[0] != null && Model.MealslistRT[0].legSsrs.Count > 1)
														{
															if (Model.MealslistRT[0].legSsrs[1].legssrs.Count > 0)
															{
																AirLine = Model.MealslistRT[0].legSsrs[1].legssrs[0].legpassengers[0].Airline.ToString();
															}
														}
													}

													List<SelectListItem> mealOptions = new List<SelectListItem>();
													if (AirLine.ToLower() == "airasia")
													{
														if (Model.MealslistRT[0].legSsrs.Count > 1)
														{
															for (int s = 0; s < Model.MealslistRT[0].legSsrs[1].legssrs.Count; s++)
															{
																string ssrprice = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price;
																mealnamedisplay = Model.MealslistRT[0].legSsrs[1].legssrs[s].name;
																string Mealcode = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "OneWay1" + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline;
																// string MealData = Mealcode.StartsWith("V", StringComparison.OrdinalIgnoreCase).ToString();
																string Mealname = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode + "-" + Model.MealslistRT[0].legSsrs[1].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price;
																AirLine = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline.ToString();
																ssrkeyAA = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "OneWay1" + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline;

																string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) || Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString().ToString();
																if (Mcode.ToLower() == "true")
																{
																	continue;
																}
																if (mealnamedisplay == null)
																{
																	continue;
																}
																else
																	ssrkey = Mealcode;


																if (Mealcode != null)
																{
																	if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																	{
																		// if (MealData != "False")
																		// {

																		if (ssrkeyAA != null)
																		{
																			mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																		}
																		// }

																	}
																	else
																	{
																		// Assuming MealImageList.GetAllmeal() returns a list of objects with MealCode and MealImage properties
																		mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																	}
																}


															}
														}
													}
													else
													{
														if (Model.MealslistRT != null && Model.MealslistRT.Count > 0 && Model.MealslistRT[0] != null)
														{
															if (Model.MealslistRT.Count > 1 && Model.MealslistRT[0].legSsrs != null)
															{
																if (Model.MealslistRT[0].legSsrs.Count > 1)
																{
																	for (int s = 0; s < Model.MealslistRT[0].legSsrs[1].legssrs.Count; s++)
																	{
																		string ssrprice = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price;
																		mealnamedisplay = Model.MealslistRT[0].legSsrs[1].legssrs[s].name;
																		string Mealcode = string.Empty;// Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[pas].price + "_" + "OneWay1" + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																												//string MealData = Mealcode.StartsWith("V", StringComparison.OrdinalIgnoreCase).ToString();
																		string Mealname = string.Empty;//
																		AirLine = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline.ToString();

																		if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																		{
																			ssrprice = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[pas].price;
																			Mealcode = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[pas].price + "_" + "OneWay1" + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																			Mealname = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode + "-" + Model.MealslistRT[0].legSsrs[1].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[pas].price;
																			ssrkeyAA = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[pas].price + "_" + "OneWay1" + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline;
																		}
																		else
																		{
																			Mealcode = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "OneWay1" + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																			Mealname = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode + "-" + Model.MealslistRT[0].legSsrs[1].legssrs[s].name + " ₹" + @Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price;
																			ssrkeyAA = Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "OneWay1" + "_" + Model.MealslistRT[0].legSsrs[1].legssrs[s].legpassengers[0].Airline;
																		}
																		string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) || Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																		Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString().ToString();

																		bool SpecialCode = false;
																		if (AirLine.ToLower() == "airindia")
																		{

																			string Sssrcode = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode;
																			SpecialCode = (Sssrcode.Equals("AVML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("BBML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("BLML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("CHML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("DBML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("FPML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("GFML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("HNML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("KSML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("LCML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("LFML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("LSML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("MOML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("NBML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("NLML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("NOML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("RVML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("SFML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("SPML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("VGML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("VJML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("VLML", StringComparison.OrdinalIgnoreCase) ||
																			Sssrcode.Equals("VOML", StringComparison.OrdinalIgnoreCase));
																			//string Mcode = isSpecialCode.ToString();
																			if (SpecialCode == false)
																			{
																				continue;
																			}
																			else
																				ssrkey = Mealcode;
																		}
																		else
																		{

																			string inventry = Model.MealslistRT[0].legSsrs[1].legssrs[s].inventoryControlled.ToString();
																			string fastFFDW = Model.MealslistRT[0].legSsrs[1].legssrs[s].ssrCode;
																			// string Mcode = Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																			if (fastFFDW == "FFWD")
																			{
																				continue;
																			}
																			if (Mcode.ToLower() == "true")
																			{
																				continue;
																			}
																			if (mealnamedisplay == null)
																			{
																				continue;
																			}
																			else
																				ssrkey = Mealcode;
																		}

																		if (Mealcode != null)
																		{
																			if (AirLine.ToLower() == "airasia")
																			{

																				if (ssrkeyAA != null)
																				{
																					mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																				}

																			}
																			else if (AirLine.ToLower() == "akasaair")
																			{
																				//if (inventry == "true")
																				//{
																				if (ssrkeyAA != null)
																				{
																					mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																				}
																				//}

																			}
																			else
																			{
																				// Assuming MealImageList.GetAllmeal() returns a list of objects with MealCode and MealImage properties
																				mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																			}
																		}


																	}
																}
															}
														}
													}
												}
												<div>

													@if (mealOptions.Count > 0)
													{
														<select id="ddlMealOptions2" class="servc-bordr servc-bordrCon">
															<option selected="selected" value="">Please select meal</option>
															@foreach (var option in mealOptions)
															{
																<option value="@option.Value" data-ssrkey=@ssrkey>
																	@option.Text
																</option>
															}
														</select>
													}
													else
													{
														<select style="background:#f0f0f0" id="ddlMealOptions2" class="servc-bordr servc-bordrCon" disabled>
															<option selected="selected" value="">Meal Unavailable</option>
														</select>
													}
													<input type="hidden" id="hiddenSsrKey2" name="ssrKey" value="" />
												</div>
												@*<select id="mealid" class="servc-bordr select-width" asp-items="@mealOptions"></select>*@
											</div>
											</div>
											<div class="cell">
												<div class="lft-spc">
														<input type="button" id="exampleModalSeat" value="Seat Map" class="button modelPopBtn small-btn rtbtn" data-toggle="modal" data-target="#sgexampleModal">
														<div class="output-div-input" id="outputDivConnect_@pas"></div>
												</div>												
											</div>

											<div class="cell">
												<div class="lft-spc">&nbsp;</div>
											</div>
											@if (AirLine.ToLower() == "airasia")
											{
										<div class="cell">
											<div class="lft-spc">
											<select class="servc-bordr">
												<option value=""><b>OtherService Unavailable</b></option>
											</select>
											</div>
										</div>
											}
											else
											{
											<div class="cell">
											<div class="lft-spc" style="width: 100%;">
													<select class="servc-bordr">
														<option></option>
														<option>Meal1</option>
														<option>Meal2</option>
														<option>Meal3</option>
														<option>Meal4</option>
													</select>
											</div>
											</div>
											}
										</div>

									}
								}


							</div>					
				</div>

				@if (Model.passeengerlistRT.Count > 1)
				{
					<!------------Return Right side Trip non stop Start---->
					<div class="service-table" id="tabshow1RT">
						<div class="border-service">
									@*<div class="d-flex justify-content-between bg-servc py-2">
										<div class="serv-header">
											Traveller
										</div>
										<div class="serv-header">
											<img src="~/img/pmeal.png" style="width:20px;height:20px;margin-right:10px;" />  Meal
										</div>
										<div class="serv-header">
											<img src="~/img/pseat.png" style="width:20px;height:20px;margin-right:10px;" />Seat
										</div>
										<div class="serv-header">
											<img src="~/img/pbaggage.png" style="width:20px;height:20px;margin-right:10px;" /> Baggage
										</div>
										<div class="serv-header">
											Special Request
										</div>
									</div>*@

									<div class="table-row header">
										<div class="cell traveller-cell"><span class="lft-spc">Traveller</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pmeal.png" class="icon"> Meal</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pseat.png" class="icon"> Seat</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pbaggage.png" class="icon">Baggage</span></div>
										<div class="cell"><span class="lft-spc">Special Request</span></div>
									</div>


									@{
										passengerdata2 = @Model.passeengerlistRT[1].passengerscount;
									}

									@{
										passengerdataValue2 = 0;
										for (int i = 0; i < @Model.passeengerlistRT[1].passengers.Count; i++)
										{
											if (Model.passeengerlistRT[1].passengers[i].passengerTypeCode == "ADT" || Model.passeengerlistRT[1].passengers[i].passengerTypeCode == "CHD")
											{
												if (Model.passengerNamedetails != null)
												{
													Model.passeengerlistRT[1].passengers[i].name = Model.passengerNamedetails[i].first;
												}
												passengerdataValue2 = passengerdataValue2 + 1;
											}
										}
										passengerdata2 = passengerdataValue2;


										for (int pas = 0; pas < Model.passengerNamedetails.Count; pas++)
										{
											if (Model.passengerNamedetails[pas].passengertypecode == "INF" || Model.passengerNamedetails[pas].passengertypecode == "INFT")
												continue;
											string AirLine = string.Empty;
											string FullName = string.Empty;
											string mealnamedisplay = string.Empty;
											string ssrkeyAA = string.Empty;
											string bagkeyAA = string.Empty;
											string ssrkey = string.Empty;
											<div class="table-row">
												<div class="cell traveller-cell">
													<div class="lft-spc">
													<!--Travellor @pas-->
													@if (Model.passengerNamedetails != null)
													{
														string name = Model.passengerNamedetails[pas].first;
														FullName = Model.passengerNamedetails[pas].first + "/" + Model.passengerNamedetails[pas].last + "/" + Model.passengerNamedetails[pas].passengertypecode;
														<span>@name</span>
													}
													</div>
												</div>
												<div class="cell select-optionRT">
													<div class="lft-spc">
													@{
														if (Model.MealslistRT != null && Model.MealslistRT.Count > 1)
														{
															if (Model.MealslistRT[1] != null)
															{
																if (Model.MealslistRT[1].legSsrs[0].legssrs.Count > 0)
																{
																	AirLine = Model.MealslistRT[1].legSsrs[0].legssrs[0].legpassengers[0].Airline.ToString();
																}
															}
														}
														List<SelectListItem> mealOptions = new List<SelectListItem>();
														if (AirLine.ToLower() == "airasia")
														{
															if (Model.MealslistRT[1].legSsrs.Count > 0)
															{
																for (int s = 0; s < Model.MealslistRT[1].legSsrs[0].legssrs.Count; s++)
																{
																	try
																	{
																		string ssrprice = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																		mealnamedisplay = Model.MealslistRT[1].legSsrs[0].legssrs[s].name;
																		string Mealcode = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "RT0" + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																		//  string MealcodeCondata = Mealcode.StartsWith("V", StringComparison.OrdinalIgnoreCase).ToString();
																		string Mealname = string.Empty;// Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																		AirLine = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline.ToString();

																		if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																		{
																			Mealname = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																			ssrkeyAA = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "RT0" + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																		}
																		else
																		{
																			Mealname = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																			ssrkeyAA = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "RT0" + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																		}
																		string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) ||
																		Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																		Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString();

																		// string Mcode = Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																		if (Mcode.ToLower() == "true")
																		{
																			continue;
																		}
																		if (mealnamedisplay == null)
																		{
																			continue;
																		}
																		else
																			ssrkey = Mealcode;

																		if (Mealcode != null)
																		{
																			if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																			{
																				if (ssrkeyAA != null)
																				{
																					mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																				}
																			}
																			else
																			{
																				mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																			}
																		}
																	}
																	catch (Exception ex)
																	{

																	}

																}
															}
														}
														else
														{
															if (Model.MealslistRT != null && Model.MealslistRT.Count > 1 && Model.MealslistRT[1] != null)
															{
																if (Model.MealslistRT.Count > 1 && Model.MealslistRT[1].legSsrs != null)
																{
																	if (Model.MealslistRT[1].legSsrs.Count > 0)
																	{
																		for (int s = 0; s < Model.MealslistRT[1].legSsrs[0].legssrs.Count; s++)
																		{
																			string Mealcode = string.Empty;
																			string Mealname = string.Empty;
																			string ssrprice = string.Empty;
																			try
																			{
																				mealnamedisplay = Model.MealslistRT[1].legSsrs[0].legssrs[s].name;
																				AirLine = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline.ToString();
																				if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																				{
																					ssrprice = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[pas].price;
																					Mealcode = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[pas].price + "_" + "RT0" + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																					Mealname = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[pas].price;
																					ssrkeyAA = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[pas].price + "_" + "RT0" + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																				}
																				else
																				{
																					ssrprice = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																					Mealcode = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "RT0" + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																					Mealname = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																					ssrkeyAA = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price + "_" + "RT0" + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline;
																				}
																				string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) ||
																				Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																				Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString();

																				bool SpecialCode = false;
																				if (AirLine.ToLower() == "airindia")
																				{
																					string Sssrcode = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode;
																					SpecialCode = (Sssrcode.Equals("AVML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("BBML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("BLML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("CHML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("DBML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("FPML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("GFML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("HNML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("KSML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("LCML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("LFML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("LSML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("MOML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("NBML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("NLML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("NOML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("RVML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("SFML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("SPML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("VGML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("VJML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("VLML", StringComparison.OrdinalIgnoreCase) ||
																					Sssrcode.Equals("VOML", StringComparison.OrdinalIgnoreCase));
																					//string Mcode = isSpecialCode.ToString();
																					if (SpecialCode == false)
																					{
																						continue;
																					}
																					else
																						ssrkey = Mealcode;
																				}
																				else
																				{

																					// string Mcode = Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																					string inventry = Model.MealslistRT[1].legSsrs[0].legssrs[s].inventoryControlled.ToString();
																					string fastFFDW = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode;
																					// string Mcode = Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																					if (fastFFDW == "FFWD")
																					{
																						continue;
																					}
																					if (Mcode.ToLower() == "true")
																					{
																						continue;
																					}
																					if (mealnamedisplay == null)
																					{
																						continue;
																					}
																					else
																						ssrkey = Mealcode;
																				}
																				if (Mealcode != null)
																				{
																					if (AirLine.ToLower() == "airasia")
																					{

																						if (ssrkeyAA != null)
																						{
																							mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																						}

																					}
																					else if (AirLine.ToLower() == "akasaair")
																					{
																						if (ssrkeyAA != null)
																						{
																							mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																						}
																					}
																					else
																					{
																						mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																					}
																				}
																			}
																			catch (Exception ex)
																			{

																			}
																		}
																	}
																}
															}
														}
													}
													<div>
														@if (mealOptions.Count > 0)
														{
															<select id="ddlMealOptions" class="servc-bordr servc-bordrm2">
																<option selected="selected" value="">Please select meal</option>
																@foreach (var option in mealOptions)
																{
																	<option value="@option.Value" data-ssrkey=@ssrkey>
																		@option.Text
																	</option>
																}
															</select>
															<input type="hidden" id="hiddenSsrKeyRT" name="ssrKey" value="" />
														}
														else
														{
															<select style="background:#f0f0f0" id="ddlMealOptions" class="servc-bordr servc-bordrm1" disabled>
																<option selected="selected" value="">Meal Unavailable</option>
															</select>
														}

													</div>
													</div>
												</div>
												<div class="cell">
													<div class="lft-spc">
														<input type="button" id="exampleModalSeat" value="Seat Map" class="button modelPopBtn small-btn rtbtn" data-toggle="modal" data-target="#sgexampleModal">
														<div class="output-div-input" id="outputDivRT_@pas"></div>
													</div>													
												</div>
												<div class="cell select-baggageRT">
													<div class="lft-spc">
													@{
														List<SelectListItem> BaggageOptions = new List<SelectListItem>();

														if (AirLine.ToLower() == "airasia")
														{
															for (int s = 0; s < Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr.Count; s++)
															{

																string priceBaggage = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
																string Sssrcode = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].ssrCode;
																// string bagcode = Sssrcode.StartsWith("P", StringComparison.OrdinalIgnoreCase).ToString();
																bool isSpecialCode = Sssrcode.Equals("PBCA", StringComparison.OrdinalIgnoreCase) ||
																Sssrcode.Equals("PBCB", StringComparison.OrdinalIgnoreCase) ||
																Sssrcode.Equals("PBA3", StringComparison.OrdinalIgnoreCase) ||
																Sssrcode.Equals("PBAB", StringComparison.OrdinalIgnoreCase) ||
																Sssrcode.Equals("PBAC", StringComparison.OrdinalIgnoreCase) ||
																Sssrcode.Equals("PBAD", StringComparison.OrdinalIgnoreCase) ||
																Sssrcode.Equals("PBAF", StringComparison.OrdinalIgnoreCase);
																string bagcode = isSpecialCode.ToString();
																var bagname = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].name + "@" + Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
																bagkeyAA = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].ssrKey + "_" + Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price + "_" + Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].Airline;
																string passengerKey = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].passengerKey;
																if (bagcode != "False")
																{
																	if (bagname.Contains("Xtra-Carry-On") || bagname.Contains(" Xcess Baggage"))
																	{
																		string[] parts = bagname.Split(new string[] { "Xtra-Carry-On", "Xcess Baggage" }, StringSplitOptions.RemoveEmptyEntries);
																		string _desc = string.Empty;
																		if (Sssrcode.Equals("PBCA", StringComparison.OrdinalIgnoreCase) || Sssrcode.Equals("PBCB", StringComparison.OrdinalIgnoreCase))
																			_desc = "Cabin Baggage";
																		else
																			_desc = "Check-In Baggage";
																		string formattedNameCon = string.Join(_desc, parts).Trim();
																		BaggageOptions.Add(new SelectListItem { Text = formattedNameCon, Value = bagkeyAA });
																	}
																	else
																	{
																		BaggageOptions.Add(new SelectListItem { Text = bagname, Value = bagkeyAA });
																	}
																}



															}


														}

														if (AirLine.ToLower() == "akasaair")
														{
															if (Model.MealslistRT.Count > 1)
															{
																for (int s = 0; s < Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr.Count; s++)
																{

																	string priceBaggage = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
																	string Sssrcode = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].ssrCode;
																	string bagcode = Sssrcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																	var bagname = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].name + "@" + Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price;
																	bagkeyAA = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].ssrKey + "_" + Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].price + "_" + Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[0].Airline;
																	string passengerKey = Model.MealslistRT[1].journeySsrsBaggage[0].baggageSsr[s].passengersAvailabilityBaggage[pas].passengerKey;
																	if (bagcode != "False")
																	{
																		if (bagname.Contains("Xtra-Carry-On") || bagname.Contains(" Xcess Baggage"))
																		{
																			string[] parts = bagname.Split(new string[] { "Xtra-Carry-On", "Xcess Baggage" }, StringSplitOptions.RemoveEmptyEntries);
																			string _desc = string.Empty;
																			if (Sssrcode.Equals("PBCA", StringComparison.OrdinalIgnoreCase) || Sssrcode.Equals("PBCB", StringComparison.OrdinalIgnoreCase))
																				_desc = "Cabin Baggage";
																			else
																				_desc = "Check-In Baggage";
																			string formattedNameCon = string.Join(_desc, parts).Trim();
																			BaggageOptions.Add(new SelectListItem { Text = formattedNameCon, Value = bagkeyAA });
																		}
																		else
																		{
																			BaggageOptions.Add(new SelectListItem { Text = bagname, Value = bagkeyAA });
																		}
																	}



																}

															}
														}
														else if (AirLine.ToLower() == "airindia")
														{
															BaggageOptions = new List<SelectListItem>();
															string weight = "";
															//var bagkey = "";
															string Bagname = "";
															string Sssrcode = "";

															for (int i = 0; i < Model.BaggagelistRT[1].legSsrs.Count; i++)
															{
																if (Model.BaggagelistRT[1].legSsrs[i].legssrs[0].ssrCode.Contains(Model.passengerNamedetails[pas].passengerkey.Split("**")[0]))
																{
																	string ssrprice = Model.BaggagelistRT[1].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																	// if (Model.passengerNamedetails[pas].passengerkey.Contains("**"))
																	// {
																	// 	Sssrcode = Model.BaggagelistRT[1].legSsrs[i].legssrs[0].ssrCode + "_" + Model.passengerNamedetails[pas].passengerkey.Split("**")[1] + "_" + Model.BaggagelistRT[1].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																	// }
																	// else
																	// {
																	// 	Sssrcode = Model.BaggagelistRT[1].legSsrs[i].legssrs[0].ssrCode + "_" + Model.passengerNamedetails[pas].passengerkey + "_" + Model.BaggagelistRT[1].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																	// }
																	Sssrcode = Model.BaggagelistRT[1].legSsrs[i].legssrs[0].ssrCode;
																	Bagname = Model.BaggagelistRT[1].legSsrs[i].legssrs[0].name + " ₹" + @Model.BaggagelistRT[1].legSsrs[i].legssrs[0].legpassengers[0].price.Replace("INR", "");
																	bagkeyAA = Bagname;
																	if (bagkeyAA != null)
																	{
																		BaggageOptions.Add(new SelectListItem { Text = Bagname, Value = Sssrcode });
																	}
																}
																else
																	continue;

															}
														}
														else
														{
															if (Model.MealslistRT != null && Model.MealslistRT.Count > 1 && Model.MealslistRT[1] != null)
															{
																var bagkey = "";
																string Bagname = "";
																if (Model.MealslistRT.Count > 1 && Model.MealslistRT[1].legSsrs != null)
																{
																	if (Model.MealslistRT[1].legSsrs.Count > 0)
																	{
																		for (int s = 0; s < Model.MealslistRT[1].legSsrs[0].legssrs.Count; s++)
																		{
																			string ssrprice = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																			string Sssrcode = Model.MealslistRT[1].legSsrs[0].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																			AirLine = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].Airline.ToString();
																			string bagcode = string.Empty;
																			string weight = string.Empty;
																			// if (AirLine.ToLower() == "airindia")
																			// {
																			// 	bagcode = Sssrcode.StartsWith("XBAG", StringComparison.OrdinalIgnoreCase).ToString();
																			// 	if (Model.passengerNamedetails[pas].passengertypecode == "ADT" || Model.passengerNamedetails[pas].passengertypecode == "CNN" || Model.passengerNamedetails[pas].passengertypecode == "CHD")
																			// 	{
																			// 		weight = "15 kg";
																			// 	}

																			// }
																			// else
																			// {
																				bagcode = (Sssrcode.StartsWith("X", StringComparison.OrdinalIgnoreCase) || Sssrcode.StartsWith("E", StringComparison.OrdinalIgnoreCase)).ToString();
																			//}
																			bagkeyAA = Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																			if (bagcode.ToLower() == "true")
																			{
																				// if (AirLine.ToLower() == "airindia")
																				// {
																				// 	Bagname = Model.MealslistRT[1].legSsrs[0].legssrs[s].name + "-" + weight + " ₹" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;

																				// }
																				// else
																				// {
																					Bagname = Model.MealslistRT[1].legSsrs[0].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[0].legssrs[s].legpassengers[0].price;
																				//}

																				bagkeyAA = Sssrcode; //Model.Meals.legSsrs[0].legssrs[s].legpassengers[pas].ssrKey;
																			}             //string passengerKey = Model.Meals.legSsrs[0].legssrs[s].legpassengers[pas].passengerKey;
																			else
																				continue;


																			if (bagcode != null)
																			{
																				if (AirLine.ToLower() == "airasia")
																				{
																					if (bagkeyAA != null)
																					{
																						BaggageOptions.Add(new SelectListItem { Text = Bagname, Value = bagkeyAA });
																					}
																				}
																				else
																				{   // Baggage Code except AirAsia
																					// Assuming MealImageList.GetAllmeal() returns a list of objects with MealCode and MealImage properties
																					BaggageOptions.Add(new SelectListItem { Text = Bagname, Value = Sssrcode });
																				}
																			}
																		}
																	}
																}
															}



														}
													}

													<div>

														<select id="ddlbagOptions" class="servc-bordr servc-bordrbaggagem2">

															<option selected="selected" value="">Please select baggage</option>
															@if (AirLine.ToLower() == "airindia")
															{
																@foreach (var option in BaggageOptions)
																{
																	<option value="@option.Value" data-bagkey=@bagkeyAA>
																		@*option.Text.Split('*')[0].ToString()*@
																		@option.Text.Split('_')[0].ToString() ₹  @option.Text.Split('_')[2].ToString().Split('₹')[0]

																	</option>
																}
															}
															else
															{
																var sortedBaggageOptions = BaggageOptions.OrderBy(o => int.Parse(new string(o.Text.Where(char.IsDigit).ToArray())))
																.ToList();

																@foreach (var option in sortedBaggageOptions)
																{
																	<option value="@option.Value" data-bagkey=@bagkeyAA>
																		@option.Text
																	</option>
																}
															}
														</select>
														<input type="hidden" id="hiddenbagKeyRT" name="bagkey" value="" />
													</div>
													</div>
												</div>
												@if (AirLine.ToLower() == "airasia")
												{
												<div class="cell">
												<div class="lft-spc">
														<select class="servc-bordr">
															<option value=""><b>OtherService Unavailable</b></option>
														</select>
												</div>
												</div>

												}
												else
												{
													<div class="cell">
												<div class="lft-spc" style="width: 100%;">
														<select class="servc-bordr">
															<option></option>
															<option>Meal1</option>
															<option>Meal2</option>
															<option>Meal3</option>
															<option>Meal4</option>
														</select>
														</div>
													</div>
												}
											</div>

										}
									}

								</div>
					</div>

					<!----Return Right side Connceting---->
					<div class="service-table" id="tabshow2RT">
						<div class="border-service">
									@*<div class="d-flex justify-content-between bg-servc py-2">
										<div class="serv-header">
											Traveller
										</div>
										<div class="serv-header">
											<img src="~/img/pmeal.png" style="width:20px;height:20px;margin-right:10px;" /> Meal
										</div>
										<div class="serv-header">
											<img src="~/img/pseat.png" style="width:20px;height:20px;margin-right:10px;" /> Seat
										</div>

										<div class="serv-header">
											Special Request
										</div>
									</div>*@

									<div class="table-row header">
										<div class="cell traveller-cell"><span class="lft-spc">Traveller</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pmeal.png" class="icon"> Meal</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pseat.png" class="icon"> Seat</span></div>
										<div class="cell"><span class="lft-spc"><img src="~/img/pbaggage.png" class="icon">Baggage</span></div>
										<div class="cell"><span class="lft-spc">Special Request</span></div>
									</div>


									@{
										passengerdata2 = @Model.passeengerlistRT[1].passengerscount;
									}

									@{
										passengerdataValue2 = 0;
										for (int i = 0; i < @Model.passeengerlistRT[1].passengers.Count; i++)
										{
											if (Model.passeengerlistRT[1].passengers[i].passengerTypeCode == "ADT" || Model.passeengerlistRT[1].passengers[i].passengerTypeCode == "CHD")
											{
												passengerdataValue2 = passengerdataValue2 + 1;
											}
										}
										passengerdata2 = passengerdataValue2;


										for (int pas = 0; pas < Model.passengerNamedetails.Count; pas++)
										{
											if (Model.passengerNamedetails[pas].passengertypecode == "INF" || Model.passengerNamedetails[pas].passengertypecode == "INFT")
												continue;
											string AirLine = string.Empty;
											string FullName = string.Empty;
											string mealnamedisplay = string.Empty;
											string ssrkeyAA = string.Empty;
											string ssrkey = string.Empty;
											<div class="table-row">
												<div class="cell traveller-cell">
													<div class="lft-spc">
													<!--Travellor @pas-->
													@if (Model.passengerNamedetails != null)
													{
														string name = Model.passengerNamedetails[pas].first;
														FullName = Model.passengerNamedetails[pas].first + "/" + Model.passengerNamedetails[pas].last + "/" + Model.passengerNamedetails[pas].passengertypecode;
														<span>@name</span>
													}
												</div>
												</div>
												<div class="cell select-option2RT">
													<div class="lft-spc">

													@{
														if (Model.MealslistRT != null && Model.MealslistRT.Count > 1)
														{
															if (Model.MealslistRT[1] != null && Model.MealslistRT[1].legSsrs.Count > 1)
															{
															   if (Model.MealslistRT[1].legSsrs[1].legssrs.Count > 0)
														       {
																 AirLine = Model.MealslistRT[1].legSsrs[1].legssrs[0].legpassengers[0].Airline.ToString();
														       }
															}
														}
														List<SelectListItem> mealOptions = new List<SelectListItem>();
														if (AirLine.ToLower() == "airasia")
														{
															if (Model.MealslistRT[1].legSsrs.Count > 1)
															{
																for (int s = 0; s < Model.MealslistRT[1].legSsrs[1].legssrs.Count; s++)
																{
																	string ssrprice = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price;
																	mealnamedisplay = Model.MealslistRT[1].legSsrs[1].legssrs[s].name;
																	string Mealcode = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "RT1" + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline;
																	string MealcodeRT = Mealcode.StartsWith("V", StringComparison.OrdinalIgnoreCase).ToString();
																	string Mealname = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[1].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price;
																	AirLine = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline.ToString();
																	ssrkeyAA = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "RT1" + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline;

																	string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) || Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																	Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString().ToString();
																	if (Mcode.ToLower() == "true")
																	{
																		continue;
																	}
																	if (mealnamedisplay == null)
																	{
																		continue;
																	}
																	else
																		ssrkey = Mealcode;


																	if (Mealcode != null)
																	{
																		if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																		{
																			if (MealcodeRT != "False")
																			{
																				if (ssrkeyAA != null)
																				{
																					mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																				}
																			}

																		}
																		else
																		{
																			// Assuming MealImageList.GetAllmeal() returns a list of objects with MealCode and MealImage properties
																			mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																		}
																	}

																}
															}
														}
														else
														{
															if (Model.MealslistRT != null && Model.MealslistRT.Count > 1 && Model.MealslistRT[1] != null)
															{
																if (Model.MealslistRT.Count > 1 && Model.MealslistRT[1].legSsrs != null)
																{
																	if (Model.MealslistRT[1].legSsrs.Count > 1)
																	{
																		for (int s = 0; s < Model.MealslistRT[1].legSsrs[1].legssrs.Count; s++)
																		{
																			string ssrprice = string.Empty;// Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].price;
																			mealnamedisplay = Model.MealslistRT[1].legSsrs[1].legssrs[s].name;
																			string Mealcode = string.Empty;//Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].price + "_" + "RT1" + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																			string Mealname = string.Empty;//Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[1].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].price;
																			AirLine = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline.ToString();
																			if (AirLine.ToLower() == "airasia" || AirLine.ToLower() == "akasaair")
																			{
																				ssrprice = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].price;
																				Mealcode = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].price + "_" + "RT1" + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																				Mealname = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[1].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].price;
																				ssrkeyAA = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[pas].price + "_" + "RT1" + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline;
																			}
																			else
																			{
																				ssrprice = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price;
																				Mealcode = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "RT1" + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline + "_" + FullName;
																				Mealname = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode + "-" + Model.MealslistRT[1].legSsrs[1].legssrs[s].name + " ₹" + @Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price;
																				ssrkeyAA = Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].ssrKey + "_" + @Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].price + "_" + "RT1" + "_" + Model.MealslistRT[1].legSsrs[1].legssrs[s].legpassengers[0].Airline;
																			}
																			string Mcode = (Mealcode.StartsWith("E", StringComparison.OrdinalIgnoreCase) || Mealcode.StartsWith("INFT", StringComparison.OrdinalIgnoreCase) ||
																			Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase)).ToString().ToString();

																			bool SpecialCode = false;
																			if (AirLine.ToLower() == "airindia")
																			{
																				string Sssrcode = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode;
																				SpecialCode = (Sssrcode.Equals("AVML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("BBML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("BLML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("CHML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("DBML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("FPML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("GFML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("HNML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("KSML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("LCML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("LFML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("LSML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("MOML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("NBML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("NLML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("NOML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("RVML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("SFML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("SPML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("VGML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("VJML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("VLML", StringComparison.OrdinalIgnoreCase) ||
																				Sssrcode.Equals("VOML", StringComparison.OrdinalIgnoreCase));
																				//string Mcode = isSpecialCode.ToString();
																				if (SpecialCode == false)
																				{
																					continue;
																				}
																				else
																					ssrkey = Mealcode;
																			}
																			else
																			{

																				string inventry = Model.MealslistRT[1].legSsrs[1].legssrs[s].inventoryControlled.ToString();
																				string fastFFDW = Model.MealslistRT[1].legSsrs[1].legssrs[s].ssrCode;
																				// string Mcode = Mealcode.StartsWith("X", StringComparison.OrdinalIgnoreCase).ToString();
																				if (fastFFDW == "FFWD")
																				{
																					continue;
																				}
																				if (Mcode.ToLower() == "true" || SpecialCode == true)
																				{
																					continue;
																				}
																				if (mealnamedisplay == null)
																				{
																					continue;
																				}
																				else
																					ssrkey = Mealcode;
																			}

																			if (Mealcode != null)
																			{
																				if (AirLine.ToLower() == "airasia")
																				{

																					if (ssrkeyAA != null)
																					{
																						mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																					}

																				}

																				else if (AirLine.ToLower() == "akasaair")
																				{
																					// if (inventry == "true")
																					//{
																					if (ssrkeyAA != null)
																					{
																						mealOptions.Add(new SelectListItem { Text = Mealname, Value = ssrkeyAA });
																					}
																					// }
																				}
																				else
																				{
																					// Assuming MealImageList.GetAllmeal() returns a list of objects with MealCode and MealImage properties
																					mealOptions.Add(new SelectListItem { Text = Mealname, Value = Mealcode });
																				}
																			}

																		}
																	}
																}
															}
														}
													}
													<div>
														@if (mealOptions.Count > 0)
														{
															<select id="ddlMealOptions2" class="servc-bordr servc-bordrConm1">
																<option selected="selected" value="">Please select meal</option>
																@foreach (var option in mealOptions)
																{
																	<option value="@option.Value" data-ssrkey=@ssrkey>
																		@option.Text
																	</option>
																}
															</select>
															<input type="hidden" id="hiddenSsrKey2RT" name="ssrKey" value="" />


														}
														else
														{
															<select style="background:#f0f0f0" id="ddlMealOptions" class="servc-bordr servc-bordrm1" disabled>
																<option selected="selected" value="">Meal Unavailable</option>
															</select>
														}

													</div>
													</div>
												</div>
												<div class="cell">
													<div class="lft-spc">
														<input type="button" id="exampleModalSeat" value="Seat Map" class="button modelPopBtn small-btn rtbtn" data-toggle="modal" data-target="#sgexampleModal">
														<div class="output-div-input" id="outputDivConnectRT_@pas"></div>
													</div>													
												</div>

												<div class="cell">
													<div class="lft-spc">&nbsp;</div>
												</div>
												@if (AirLine.ToLower() == "airasia")
												{
												<div class="cell">
													<div class="lft-spc">
													<select class="servc-bordr">
														<option value=""><b>OtherService Unavailable</b></option>

													</select>
													</div>
												</div>

												}
												else
												{
											<div class="cell">
												<div class="lft-spc" style="width: 100%;">
												<select class="servc-bordr">
													<option></option>
													<option>Meal1</option>
													<option>Meal2</option>
													<option>Meal3</option>
													<option>Meal4</option>
												</select>
												</div>
											</div>

												}
											</div>

										}
									}

								</div>
						
					</div>
				}

				<!------------Return End--------------->

			</div>

		</div>

	</div>

</div>

